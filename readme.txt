1. Пояснения по конфигурации приложения packet.json
 - devDependencies отвечает за сборку проекта. То есть эти зависимости нужны только на этапе разработки и сборки,
   файлы этих зависимостей не нужны на самом сайте и будут только занимать лишнее место
 - babel-cli необходим для работы babel (babel отвечает за возможность написания клда на ECMAScript новых версий,
   но что бы собранный проект работал на более старых версяих браузера)
 - babel/preset-env означает что подключаем все возможные плагины для babel, что бы не 
   перечислять по одному. Всего плагинов более 30

2. .babelrc содержит все плагины, которые мы будем подключать для трансформации ECMAScript со старыми версиями.
    Если использовать babel/preset-env, то подключаются все возможные плагины для babel
    Cписок плагинов тут: https://babeljs.io/docs/en/plugins-list. Все плагины лучше не подключать, это повлияет 
    на размер сборки, и на скорость браузеров, если они уже поддерживают свежий функционал, а мы все равно трансформируем
    код. Лучше применять browserslist. Исключая только ie производительность может вырасти в разы

    В данном примере, мы подключили опцию "debug":true, что бы обозначить в package.json подключаем 
    в browserslist список поддерживаемых браузеров. Babel сам подключит необходимые плагины. 

    "last 2 years", - браузеры за последние два года
    "> 0.5%", - плюс браузеры у которых больше 0.5% пользователей
    "not IE 11", - не учитывать IE
    "not dead" - все эти браузеры должны быть «живыми»


    npx babel src --out-dir build  - запустить данную команду в консоли, что бы посмотреть браузеры, которые покрывает наша сборка
    npx browserslist  - покажет еще более подробную информацию по браузерам. Даже избыточную

3. Для webpack
  - Для различных типов данных определяем правило "rules"
  - outputPath: 'images'  - обозначает, что данные файлы будут выгружены в папку 'images'
  - name: '[name]-[sha1:hash:7].[ext]'  - обозначает, что данные файлы будут записаны как "Имя + 7 первых цифт хэша + расширение (ext)"

4. Документация по настройке DevServer: https://webpack.js.org/configuration/dev-server/#devserver

5. Документация по настройке tsconfig.json: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
   Подробности всех настроек - http://json.schemastore.org/tsconfig

6. Папка .build для сборки проекта для среды DEV, build - для среды PRD

7. declaration.d.ts - файл деклараций. Необходим для построения картинок в build

8. Шаблон содержит настроенные языковые ресурсы со store и action

8. Шаблон содержит компонет ошибок (absolute) со store и action