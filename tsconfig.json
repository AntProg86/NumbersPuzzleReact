{
  "compilerOptions": {
    "strictPropertyInitialization": false,       //Настройка strictPropertyInitialization определяет, должны ли поля класса инициализироваться в конструкторе.
    "allowSyntheticDefaultImports": true,        // Allow 'import x from y' when a module doesn't have a default export. (Разрешить "импорт x из y", если модуль не имеет экспорта по умолчанию.)
    "allowJs": false,                            // Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. (Разрешите файлам JavaScript быть частью вашей программы. Используйте опцию "проверки", чтобы получить ошибки из этих файлов.)
    "baseUrl": ".",                              // Specify the base directory to resolve non-relative module names. (Укажите базовый каталог для разрешения несвязанных имен модулей.)
    "downlevelIteration": true,                  // Emit more compliant, but verbose and less performant JavaScript for iteration. (Используйте более совместимый, но подробный и менее производительный JavaScript для итерации.)
    "emitDecoratorMetadata": true,               // Emit design-type metadata for decorated declarations in source files. (Создайте метаданные типа дизайна для оформленных объявлений в исходных файлах.)
    "experimentalDecorators": true,              // Enable experimental support for TC39 stage 2 draft decorators. (Включите экспериментальную поддержку для декораторов проекта 2 этапа TC39.)
    "jsx": "react",                              // Specify what JSX code is generated. (Укажите, какой код JSX генерируется.)
    "lib": [                                     // Specify a set of bundled library declaration files that describe the target runtime environment. (Укажите набор файлов объявлений библиотеки в комплекте, которые описывают целевую среду выполнения.)
      "es6",
      "dom",
      "dom.iterable"
    ],
    "module": "esnext",                          // Specify what module code is generated. (Укажите, какой код модуля генерируется.)
    "moduleResolution": "node",                  // Specify how TypeScript looks up a file from a given module specifier. (Укажите, как TypeScript ищет файл из заданного спецификатора модуля.)
    "noImplicitAny": true,                       // Enable error reporting for expressions and declarations with an implied `any` type.. (Включите отчеты об ошибках для выражений и объявлений с подразумеваемым типом "любой"..)
    "noImplicitReturns": false,                  // Enable error reporting for codepaths that do not explicitly return in a function. (Включите отчеты об ошибках для путей кода, которые явно не возвращаются в функции.)
    "noImplicitThis": true,                      // Enable error reporting when `this` is given the type `any`. (Включите сообщение об ошибках, когда "этому` присвоен тип" любой`.)
    "paths": {                                   // Specify a set of entries that re-map imports to additional lookup locations. (Укажите набор записей, которые повторно сопоставляют импорт в дополнительные места поиска.)
      "#api/*": [
        "./src/api/*"
      ],
      "#client/*": [
        "src/client/*"
      ],
      "#/*": [
        "*"
      ],
      "react": [ "./node_modules/@types/react" ]
    },
    "preserveConstEnums": true,                  // Disable erasing `const enum` declarations in generated code. (Отключите удаление объявлений `const enum` в сгенерированном коде.)
    "resolveJsonModule": true,                   // Enable importing .json files (Включить импорт файлов .json)
    "skipLibCheck": true,                        // Skip type checking all .d.ts files. (Пропустите проверку типов всех файлов .d.ts.)
    "sourceMap": true,                           // Create source map files for emitted JavaScript files. (Создайте файлы исходных карт для создаваемых файлов JavaScript.)
    "strict": true,                              // Enable all strict type checking options. (Включите все параметры строгой проверки типов.)
    "strictNullChecks": true,                    // When type checking, take into account `null` and `undefined`. (При проверке типов учитывайте `null` и `undefined`.)
    "strictBindCallApply": true,                 // Check that the arguments for `bind`, `call`, and `apply` methods match the original function. (Убедитесь, что аргументы методов "привязка", "вызов" и "применение" соответствуют исходной функции.)
  },
  "exclude": [                                   // Specifies a list of type declarations to be excluded from auto type acquisition. Ex. [\"jquery\", \"lodash\"] (Указывает список объявлений типов, которые должны быть исключены из автоматического получения типов. Например ["jquery", "lodash"])
    "node_modules"
  ]
}
  